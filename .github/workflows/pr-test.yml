name: CI - Build, Test, Analyze

on:
  pull_request:
    branches: [ main ]

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Clean TestResults folder
        run: rm -rf ${{ github.workspace }}/TestResults  # Clears old files

      - name: Prepare TestResults folders
        run: |
         mkdir -p RecoTrackApi.ServiceTests/TestResults
         mkdir -p RecoTrackApi.ControllersTest/TestResults


      - name: Run Tests with Coverage - ServiceTests
        run: |
         dotnet test RecoTrackApi.ServiceTests/RecoTrackApi.ServiceTests.csproj --no-build --configuration Release \
            --collect:"XPlat Code Coverage"

      - name: Run Tests with Coverage - ControllersTest
        run: |
           dotnet test RecoTrackApi.ControllersTest/RecoTrackApi.ControllersTest.csproj --no-build --configuration Release \
            --collect:"XPlat Code Coverage"


      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Debug all coverage files
        run: |
         echo "=== Listing all coverage.cobertura.xml in workspace ==="
         find "${{ github.workspace }}" -type f -name "coverage.cobertura.xml" || true

      - name: Generate Coverage Summary
        run: |
          echo "Generating coverage summary..."
          reportgenerator \
            -reports:"${{ github.workspace }}/**/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"${{ github.workspace }}/TestResults/coverage-report" \
            -reporttypes:TextSummary
          echo "=== Summary ==="
          cat "${{ github.workspace }}/TestResults/coverage-report/Summary.txt"


      - name: Run Static Analysis
        run: dotnet build -warnaserror

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ github.workspace }}/TestResults/coverage-report


  pr_review:
    runs-on: ubuntu-latest
    needs: build-test-analyze   # ensures this job runs after the first one
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
         name: coverage-report
         path: TestResults/coverage-report

      - name: Read coverage summary (if exists)
        id: cov
        run: |
          if [ -f TestResults/coverage-report/Summary.txt ]; then
           SUMMARY=$(cat TestResults/coverage-report/Summary.txt)
           echo "text<<EOF" >> $GITHUB_OUTPUT
           echo "$SUMMARY" >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
          else
           echo "text=" >> $GITHUB_OUTPUT
          fi


      - name: Trigger AI PR Review API
        run: |
          COVERAGE="${{ steps.cov.outputs.text }}"

          # Build JSON safely
          PAYLOAD=$(jq -n \
            --arg prNumber "${{ github.event.pull_request.number }}" \
            --arg repo "${{ github.repository }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg description "${{ github.event.pull_request.body }}" \
            --arg branch "${{ github.head_ref }}" \
            --arg baseBranch "${{ github.base_ref }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg diffUrl "${{ github.event.pull_request.diff_url }}" \
            --arg coverageSummary "$COVERAGE" \
            --arg workflowRunUrl "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              prNumber: $prNumber,
              repo: $repo,
              title: $title,
              description: $description,
              branch: $branch,
              baseBranch: $baseBranch,
              author: $author,
              diffUrl: $diffUrl,
              coverageSummary: $coverageSummary,
              workflowRunUrl: $workflowRunUrl
            }'
          )

          # Save and POST
          echo "$PAYLOAD" > /tmp/payload.json
          curl -X POST "https://recotrackapi.onrender.com/api/automatedprreview/analyze" \
            -H "Content-Type: application/json" \
            --data-binary @/tmp/payload.json

